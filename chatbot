<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>RIT FAQ Chatbot</title>
  <style>
    :root {
      --bg-color: #000000;
      --text-color: #ffffff;
      --primary-color: #ff6600;
      --chat-bg: rgba(255, 255, 255, 0.08);
      --user-msg-bg: #ff6600;
      --bot-msg-bg: rgba(255, 255, 255, 0.15);
      --input-bg: rgba(255, 255, 255, 0.1);
    }

    body.light-mode {
  --bg-color: #f5f5f5;
  --text-color: #ffffff; /* Force white text even in light mode */
  --chat-bg: rgba(0, 0, 0, 0.05);
  --user-msg-bg: #ff6600;
  --bot-msg-bg: rgba(0, 0, 0, 0.1);
  --input-bg: rgba(0, 0, 0, 0.05);
}


    body.dark-mode {
  background-color: #000000;
  background-image: none; /* Remove image if needed */
}


    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: "Segoe UI", sans-serif;
      height: 100vh;
      display: flex;
      background: var(--bg-color) url("https://4kwallpapers.com/images/walls/thumbs_2t/18683.png") no-repeat center center fixed;
      background-size: cover;
      color: var(--text-color);
      overflow: hidden;
      transition: all 0.4s ease-in-out;
    }

    .sidebar {
      width: 60px;
      height: 100vh;
      background: rgba(0, 0, 0, 0.5);
      backdrop-filter: blur(10px);
      padding: 1rem 0.5rem;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: flex-start;
      position: fixed;
      top: 0;
      left: 0;
      z-index: 1000;
      gap: 1rem;
    }

    .menu-icon, .theme-toggle {
      font-size: 1.8rem;
      cursor: pointer;
      color: white;
      transition: transform 0.3s ease-in-out;
    }

    .menu-icon:hover, .theme-toggle:hover {
      transform: scale(1.2);
      color: var(--primary-color);
    }

    .dashboard {
      position: fixed;
      top: 0;
      left: 60px;
      height: 100vh;
      width: 250px;
      background-color: rgba(0, 0, 0, 0.7);
      backdrop-filter: blur(8px);
      padding: 1rem;
      color: white;
      overflow-y: auto;
      transform: translateX(-300px);
      transition: transform 0.3s ease-in-out;
      z-index: 999;
      display: flex;
      flex-direction: column;
      justify-content: flex-start;
    }

    .dashboard.show {
      transform: translateX(0);
    }

    .dashboard h2 {
      font-size: 1.2rem;
      margin-bottom: 1rem;
    }

    .dashboard ul {
      list-style: none;
      padding: 0;
    }

    .dashboard ul li {
      margin: 0.5rem 0;
      padding: 0.5rem;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 10px;
    }

    .logout-btn {
      margin-top: auto;
      background: var(--primary-color);
      color: white;
      padding: 0.7rem 1rem;
      border: none;
      border-radius: 20px;
      cursor: pointer;
      width: 100%;
      transition: background 0.2s, box-shadow 0.3s ease-in-out;
      box-shadow: 0 0 10px var(--primary-color), 0 0 20px var(--primary-color);
    }

    .logout-btn:hover {
      background-color: #fff;
      color: #ff7200;
      border: 2px solid #ff7200;
      box-shadow: 0 0 18px 4px rgba(255, 114, 0, 0.7)
    }

    .main {
      flex: 1;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: flex-start;
      padding: 1rem;
      margin-left: 60px;
      width: calc(100% - 60px);
    }

    header {
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 1rem;
      background-color: rgba(0, 0, 0, 0.3);
      width: 100%;
    }

    header img {
      height: 60px;
      margin-right: 1rem;
    }

    .title {
      font-size: 1.8rem;
      font-weight: bold;
      color: var(--primary-color);
    }

    .subtitle {
      font-size: 1rem;
    }

    .chat-container {
      width: 95%;
      max-width: 650px;
      height: 75vh;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      background: var(--chat-bg);
      backdrop-filter: blur(12px);
      border-radius: 20px;
      padding: 1rem;
      margin-top: 2rem;
      overflow: hidden;
    }

    .messages {
      flex: 1;
      overflow-y: auto;
      width: 100%;
      padding-right: 0.5rem;
    }

    .message {
      margin: 0.5rem 0;
      padding: 0.8rem 1rem;
      border-radius: 15px;
      max-width: 75%;
      word-wrap: break-word;
      background-color: var(--chat-bg);
      display: flex;
      align-items: center;
    }

    .message .icon {
      font-size: 1.2rem;
      margin-right: 0.8rem;
    }

    .user {
      align-self: flex-end;
      background-color: var(--user-msg-bg);
      color: #fff;
      margin-left: auto;
    }

    .bot {
      align-self: flex-start;
      background-color: var(--bot-msg-bg);
      color: var(--text-color);
      margin-right: auto;
    }

    .input-area {
      display: flex;
      width: 100%;
      padding-top: 1rem;
    }

    input[type="text"] {
      flex: 1;
      padding: 0.7rem 1rem;
      border: none;
      border-radius: 20px;
      font-size: 1rem;
      outline: none;
      background: var(--input-bg);
      color: var(--text-color);
      backdrop-filter: blur(2px);
    }

    .send-btn {
      padding: 15px 30px;
      font-size: 18px;
      background-color: #ff7200;
      color: white;
      border: none;
      border-radius: 10px;
      cursor: pointer;
      transition: background-color 0.3s ease, color 0.3s ease, box-shadow 0.4s ease;
      text-decoration: none;
      display: inline-block;
      box-shadow: 0 0 12px rgba(255, 114, 0, 0.6);
      position: relative;
    }

    .send-btn:hover {
     background-color: #fff;
      color: #ff7200;
      border: 2px solid #ff7200;
      box-shadow: 0 0 18px 4px rgba(255, 114, 0, 0.7)
    }

    @keyframes pulseGlow {
      0% {
        box-shadow: 0 0 10px var(--primary-color), 0 0 20px var(--primary-color);
      }
      50% {
        box-shadow: 0 0 20px var(--primary-color), 0 0 35px var(--primary-color);
      }
      100% {
        box-shadow: 0 0 10px var(--primary-color), 0 0 20px var(--primary-color);
      }
    }
  </style>
</head>
<body>
  <div class="sidebar">
    <div class="menu-icon" onclick="toggleDashboard()">â˜°</div>
    <div class="theme-toggle" onclick="toggleTheme()" title="Toggle Theme">ðŸŒ™</div>
  </div>

  <div id="dashboard" class="dashboard">
    <h2>Chat History</h2>
    <ul id="historyList"></ul>
    <button class="logout-btn" onclick="logout()">Logout</button>
  </div>

  <div class="main">
    <header>
      <img src="https://media-exp1.licdn.com/dms/image/C560BAQEWV6MflrNIog/company-logo_200_200/0?e=2159024400&v=beta&t=C70ptYU7agkfG4GzTuphNF7Clinpd5rERXr3l6WHHfg" alt="RIT Logo" />
      <div>
        <div class="title">ChatBot - RIT FAQ Assistant</div>
        <div class="subtitle">Rajalakshmi Institute of Technology</div>
      </div>
    </header>

    <div class="chat-container">
      <div class="messages" id="messages">
        <div class="message bot"><span class="icon">ðŸ‘¤</span>Hi! I'm your RIT Assistant. How can I help you today?</div>
      </div>
      <div class="input-area">
        <input type="text" id="userInput" placeholder="Type your question..." />
        <button class="send-btn" onclick="sendMessage()">Send</button>
        <button id="micButton" class="send-btn">ðŸŽ¤</button>
      </div>
    </div>
  </div>

  <script>
    const backendUrl = location.hostname === "localhost"
      ? "http://localhost:3000/chat"
      : "https://rit-chatbot-backend-1.onrender.com/chat";

    const historyList = document.getElementById("historyList");

    async function sendMessage() {
      const input = document.getElementById("userInput");
      const text = input.value.trim();
      if (!text) return;

      input.value = "";
      addMessage(text, "user");
      addToHistory(text);

      const tempMsg = document.createElement("div");
      tempMsg.className = "message bot";
      tempMsg.id = "botTemp";
      tempMsg.innerText = "Typing...";
      document.getElementById("messages").appendChild(tempMsg);
      scrollToBottom();

      const reply = await getBotReply(text);

      document.getElementById("botTemp").remove();
      addMessage(reply, "bot");
    }

    function addMessage(msg, type) {
      const div = document.createElement("div");
      div.className = "message " + type;

      const icon = document.createElement("span");
      icon.className = "icon";
      icon.innerText = type === "user" ? "ðŸ’¬" : "ðŸ‘¤";

      div.appendChild(icon);
      div.appendChild(document.createTextNode(msg));
      document.getElementById("messages").appendChild(div);
      scrollToBottom();
    }

    function scrollToBottom() {
      const msgBox = document.getElementById("messages");
      msgBox.scrollTop = msgBox.scrollHeight;
    }

    async function getBotReply(input) {
      try {
        const res = await fetch(backendUrl, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ message: input }),
        });
        const data = await res.json();
        return data.reply;
      } catch (err) {
        console.error(err);
        return "Oops! Something went wrong while connecting to the server.";
      }
    }

    function toggleDashboard() {
      const dashboard = document.getElementById("dashboard");
      dashboard.classList.toggle("show");
    }

    function addToHistory(question) {
      const item = document.createElement("li");
      item.textContent = question;
      historyList.appendChild(item);
    }

    function logout() {
      if (confirm("Are you sure you want to logout?")) {
        window.location.href = "Home page.html";
      }
    }

    // Speech recognition
    const recog = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
    recog.lang = "en-US";
    recog.interimResults = false;

    recog.onresult = (e) => {
      const transcript = e.results[0][0].transcript;
      document.getElementById("userInput").value = transcript;
      sendMessage();
    };

    recog.onerror = (event) => {
      console.error("Speech recognition error", event.error);
      alert("Speech recognition failed. Please try again.");
    };

    document.getElementById("micButton").onclick = () => {
      try {
        recog.start();
      } catch (err) {
        console.error("Failed to start speech recognition:", err);
      }
    };

    // Theme toggle logic
   function toggleTheme() {
  const body = document.body;
  const themeBtn = document.querySelector(".theme-toggle");

  body.classList.toggle("light-mode");
  body.classList.toggle("dark-mode");

  const isLight = body.classList.contains("light-mode");
  localStorage.setItem("theme", isLight ? "light" : "dark");
  themeBtn.textContent = isLight ? "â˜€" : "ðŸŒ™";
}

    // Load theme from localStorage
    window.onload = () => {
  const savedTheme = localStorage.getItem("theme");
  const themeBtn = document.querySelector(".theme-toggle");

  if (savedTheme === "light") {
    document.body.classList.add("light-mode");
    themeBtn.textContent = "â˜€";
  } else {
    document.body.classList.add("dark-mode");
    themeBtn.textContent = "ðŸŒ™";
  }
};

  </script>
</body>
</html>
